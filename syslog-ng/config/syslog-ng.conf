@version: 3.38
@include "scl.conf"

source s_local {
    internal();
};

#You can direct the system logs to a different loki server if you want, it's what this is for
destination d_loki_system {
    syslog("otherserverhostname" transport("tcp") port("1514"));
};

log {
        source(s_local);
        destination(d_loki_system);
};

#This was previewed by Peter Czanik's config, I never used it.
source s_regular { tcp(port(5141)); };

#Here is where the cisco network devices logs come from
source s_net {
    default-network-drivers(flags(store-raw-message));
};
#Same, previewed by Peter but never used.
source s_ciscoonly { tcp(port(5140) flags(no-parse,store-raw-message)); };

#this is the template responsible for exporting the data in json format, used in the destination d_fromcisco
template t_jsonfile {
    template("$(format-json --scope rfc5424 --scope dot-nv-pairs
        --rekey .* --shift 1 --scope nv-pairs --key ISODATE)\n\n");
};

#This is the parser previewed by Peter's config, again not used in my case.
parser p_cisco { cisco-parser(); };

#Here is where the file destination for the cisco logs is defined
destination d_fromcisco {
    file("/var/log/fromcisco.log" template(t_jsonfile));
};

#This destination is not used in our case because all logs are coming from Cisco devices, so the app.name field is always equal to "cisco"
#Again if you need those, you have to create the file in the docker host and define the bind volume for it.
destination d_other {
    file("/var/log/other");
};

#We would store all incoming network logs here but in raw format. 
#If this is useful to you, you need to create that file in the docker host and define the bind volume for it.
destination d_raw {
    file("/var/log/raw" template("${RAWMSG}\n"));
};

#This is the log command that sends the system logs to the alternative loki server
log {
    source(s_regular);
    destination(d_other);
};

#This is the log command that handles the network devices incoming logs
log {
    source(s_net);
    destination(d_raw);
    if ("${.app.name}" eq "cisco") {
        destination(d_fromcisco);
    } else {
        destination(d_other);
    };
};

#This command is not really applicable as we dont get logs from that source.
#If we did, this would have been used and the logs would be stored in the same destination.
log {
    source(s_ciscoonly);
    destination(d_raw);
    parser(p_cisco);
    destination(d_fromcisco);
};